# Centralized Logging S3 Solution
#
# template for centralized-logging-s3-solution
# **DO NOT DELETE**
#
# author: Maksym Khomutskyi @ Logicworks
AWSTemplateFormatVersion: 2010-09-09

Description: LW Centralized Logging Solution S3, lambda template

Parameters:
  # Primary Centralized Logging S3 Solution Stack Set
  StackUpdate:
    Description: Primary Centralized Loging StackSet to update
    Type: String
    Default: AWS-Landing-Zone-CentralizedLoggingS3Primary
  SNSTopicArn:
    Description: SNS Topic to Send New Account Information
    Type: String
    Default: "arn:aws:sns:us-east-1:315375983207:account_lists"
  SNSMsgJSON:
    Description: SNS Massage to Send
    Type: String
    Default: '{"policyNames":[{"type":"kms","name":"secretsmanager","keyarn":"arn:aws:kms:us-east-1:278833423079:key/1a5fda48-6bda-4a56-9c60-22ccb0fb8348"},{"type":"s3","name":"ss-cf-templates"},{"type":"s3","name":"ss-cf-templates"},{"type":"s3","name":"ss-terraform-state"},{"type":"secrets","name":"artifactory-docker-user"}],"accountids":[]}'

Resources:
  # IAM Roles and Policies
  ReadOrgWriteSSMRole:
    Type:                          AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
            Effect:                Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:                'sts:AssumeRole'
      Path:                        /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName:                ReadOrganizationWriteSSM
        PolicyDocument:
          Statement:
          - Effect:                Allow
            Action:
              - SNS:Publish
            Resource:              "*"
          - Effect:                Allow
            Action:
              - cloudformation:DescribeStackSet
              - cloudformation:UpdateStackSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ListChangeSets
              - cloudformation:DescribeStacks
            Resource:              "*"
          - Effect:                Allow
            Action:
              - organizations:ListAccounts
            Resource:              "*"
          - Effect:                Allow
            Action:
              - 'ssm:GetParameter*'
              - 'ssm:PutParameter'
            Resource:             !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/org/member/centralloggings3/accounts'

  # Lambda
  UpdateAccountsInSSM:
    Type:                         AWS::Lambda::Function
    Properties:
      Handler:                    index.lambda_handler
      Runtime:                    python3.6
      Timeout:                    300
      Role: !GetAtt               'ReadOrgWriteSSMRole.Arn'
      Environment:
        Variables:
          StackSettoUpdate: !Ref "StackUpdate"
          SNStopicArn: !Ref "SNSTopicArn"
          SNSmsgJ: !Ref "SNSMsgJSON"
      Code:
        ZipFile: |
          import boto3,logging,os,json,inspect,operator
          from datetime import datetime
          from botocore.vendored import requests
          log = logging.getLogger()
          log.setLevel(logging.INFO)
          SU = "SUCCESS"
          FA = "FAILED"
          s1=os.environ['SNSmsgJ']
          #sns_msg_jsn = json.loads('{"policyNames":[{"type":"kms","name":"secretsmanager","keyarn":"arn:aws:kms:us-east-1:278833423079:key/1a5fda48-6bda-4a56-9c60-22ccb0fb8348"},{"type":"s3","name":"ss-cf-templates"},{"type":"s3","name":"ss-cf-templates"},{"type":"s3","name":"ss-terraform-state"},{"type":"secrets","name":"artifactory-docker-user"}],"accountids":[]}')
          topicArn= os.environ['SNStopicArn']
          sns_msg_jsn = json.loads(s1)
          def lambda_handler(event, context):
                  #sns_msg_jsn = json.dumps(s1)
                  ssmc = boto3.client('ssm')
                  orgc = boto3.client('organizations')
                  cftc = boto3.client('cloudformation')
                  accl = orgc.list_accounts()
                  ssmp = FA
                  accli=accl["Accounts"]
                  for key in accli:
                      accid=key["Id"]
                      print (sns_msg_jsn)
                      sns_msg_jsn["accountids"].append(accid)
                      if ssmp=="FAILED":
                          ssmp="\""+accid+"\""
                      else:
                          ssmp="\""+accid+"\""+","+ssmp
                  send_to_sns_topic(sns_msg_jsn)
                  if ssmp != "FAILED":
                      response = ssmc.put_parameter(Name="/org/member/centralloggings3/accounts", Value=ssmp, Type='String', Overwrite=True)
                      try:
                        stackupdate=cftc.update_stack_set(StackSetName=str(os.environ['StackSettoUpdate']),UsePreviousTemplate=True,Parameters=[
                                  {
                                      'ParameterKey': 'KINESISSHARDSN',
                                      'UsePreviousValue': True
                                  },
                                  {
                                      'ParameterKey': 'AccountsList',
                                      'ParameterValue': ssmp,
                                      'UsePreviousValue': False,
                                  },
                                  {
                                      'ParameterKey': 'OrgID',
                                      'UsePreviousValue': True
                                  }
                              ],Capabilities=[
                                  'CAPABILITY_IAM'
                              ])
                      except Exception as e:
                        log.error("template not found: " + str(e))
                  responseDatain = {'Parameters': ssmp}
                  if 'ResponseURL' in event:
                      response = send(event, context, SU, responseDatain, None)
                  else:
                      response = responseDatain
                  return {"Response" : response}
          def send_to_sns_topic(sns_msg_jsn):
                try:
                  print("- send_to_sns_topic - SNS Message {0}".format(json.dumps(sns_msg_jsn,indent=4)))
                  client = boto3.client('sns')
                  response = client.publish(TopicArn=topicArn, Message=json.dumps(sns_msg_jsn), Subject='Organization Accounts')
                  print("Send to SNS Arn {0}".format(response))
                except Exception as e:
                    log.error("-- send_to_sns_topic -- ERROR: {0}".format(str(e)))
          def send(event, context, responseStatus, responseData, physicalResourceId):
                  responseUrl = event['ResponseURL']
                  log.info("Event: " + str(event))
                  log.info("ResponseURL: " + responseUrl)
                  resB = {}
                  resB['Status'] = responseStatus
                  resB['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
                  resB['PhysicalResourceId'] = physicalResourceId or context.log_stream_name
                  resB['StackId'] = event['StackId']
                  resB['RequestId'] = event['RequestId']
                  resB['LogicalResourceId'] = event['LogicalResourceId']
                  resB['Data'] = responseData
                  json_resB = json.dumps(resB)
                  log.info("Response body: " + str(json_resB))
                  headers = {'content-type':"",'content-length' : str(len(json_resB))}
                  try:
                    response = requests.put(responseUrl, data=json_resB, headers=headers)
                    log.info("Status code: " + str(response.reason))
                    return SU
                  except Exception as e:
                    log.error("send(..) failed executing requests.put(..): " + str(e))
                    return SU

  
  # Run lambda to set Accounts in SSM
  SetAccounts:
    DependsOn:
      - ReadOrgWriteSSMRole
    Type: Custom::SetAccounts
    Properties:
      ServiceToken: !GetAtt "UpdateAccountsInSSM.Arn"

  # Grants the event rule permission to invoke the lambda 
  UpdateAccountsInSSMPermission:
    Type:                         AWS::Lambda::Permission
    Properties:
      Action:                     lambda:InvokeFunction
      FunctionName: !GetAtt       'UpdateAccountsInSSM.Arn'
      Principal:                  events.amazonaws.com
      SourceArn: !GetAtt          'AddNewAccountInSSM.Arn'
  
  # CloudWatch event rule
  AddNewAccountInSSM:
    Type:                         AWS::Events::Rule
    Properties:
      Description:                Event rule for identifying new New Account and calling Lambda to add Account in SSM Parameter
      EventPattern:               '{"source":["aws.organizations"],"detail-type":["AWS API Call via CloudTrail"],"detail":{"eventSource":["organizations.amazonaws.com"],"eventName":["CreateAccount"]}}'
      Name:                       CreateAccountEvent
      State:                      ENABLED
      Targets:
        -
          Arn:                    !GetAtt 'UpdateAccountsInSSM.Arn'
          Id:                     add_new_account_ssm
